<project default="compile" name="Multi user drawing application">
	<description>
		Script to build a multi-user drawing application.
		
		Steps for running:
	    1. Start the RMI registry: run_registry
	    2. Start the Drawing server: run_server
	    3. Start any number of clients:
		   run_client for clients with built in commands
		   run_bareClient for clients with no built in commands
	</description>

	<!-- Properties for directories -->
	<property name="srcDir" location="src" />
	<property name="buildDir" location="bin" />
	<property name="distDir" location="dist" />
	<property name="dataDir" location="data" />

	<!--- Registry host and port -->
	<property name="registryHost" value="localhost" />
	<property name="registryPort" value="1099" />

	<!--- Remote codebase URL -->
	<property name="codeBase" value="http://hugbox.spikemeister.com/bin/" />

	<!-- Default value for the name of the properties file that names the 
	     classes that implement interface DrawingCommand and that are to be
	     loaded by a DrawingApp application. -->
	<property name="propertiesFile" value="${dataDir}/drawing.properties" />
	<property name="policyFile" value="${dataDir}/drawing.policy" />

	<target name="init">
		<!-- Creates build and distribution directories -->
		<mkdir dir="${buildDir}" />
		<mkdir dir="${distDir}" />
	</target>

	<target name="compile" depends="init">
		<!-- Invokes the usual Java compiler to compile all source files. -->
		<javac srcDir="${srcDir}" destDir="${buildDir}" />
	</target>

	<target name="dist" depends="compile">
		<!-- Creates executable JAR file for the application. -->
		<jar destfile="${distDir}/client.jar" baseDir="${buildDir}" includes="client/* client/commands/* service_interface/*">
			<manifest>
				<attribute name="Built-By" value="${user.home}" />
				<attribute name="Main-Class" value="client.DrawingApp" />
			</manifest>
			<!-- Creates a JAR for a DrawingApp client that includes
			     DrawingCommand implementation classes. -->
		</jar>
		<jar destfile="${distDir}/bareClient.jar" baseDir="${buildDir}" includes="client/* service_interface/*">
			<manifest>
				<attribute name="Built-By" value="${user.home}" />
				<attribute name="Main-Class" value="client.DrawingApp" />
			</manifest>
			<!-- Creates a JAR for a DrawingApp client that does not include
			     any DrawingCommand implementation classes. -->
		</jar>
		<jar destfile="${distDir}/server.jar" baseDir="${buildDir}" includes="server/* service_interface/*">
			<manifest>
				<attribute name="Built-By" value="${user.home}" />
				<attribute name="Main-Class" value="server.DrawingServerImpl" />
			</manifest>
			<!-- Creates a JAR for a DrawingApp server that does not include
	                 any DrawingCommand implementation classes. -->
		</jar>
	</target>

	<target name="clean">
		<!-- Wipes the build and distribution directories. -->
		<delete dir="${buildDir}" />
		<delete dir="${distDir}" />
	</target>

	<target name="run_client" depends="dist">
		<!-- Runs the client process.  -->
		<java jar="${distDir}/client.jar" fork="true">
			<sysproperty key="java.security.policy" value="${policyFile}" />
			<sysproperty key="java.rmi.server.codebase" value="${codeBase}" />
			<arg value="${propertiesFile}" />
			<arg value="${registryHost}" />
			<arg value="${registryPort}" />
		</java>
	</target>

	<target name="run_bareClient" depends="dist">
		<!-- Runs the bare client process. -->
		<java jar="${distDir}/bareClient.jar" fork="true">
			<sysproperty key="java.security.policy" value="${policyFile}" />
			<arg value="${propertiesFile}" />
			<arg value="${registryHost}" />
			<arg value="${registryPort}" />
		</java>
	</target>

	<target name="run_server" depends="dist">
		<!-- Runs the client process.  -->
		<java jar="${distDir}/server.jar" fork="true">
			<sysproperty key="java.security.policy" value="${policyFile}" />
			<sysproperty key="java.rmi.server.codebase" value="${codeBase}" />
			<arg value="${registryHost}" />
			<arg value="${registryPort}" />
		</java>
	</target>

	<target name="run_registry" depends="dist">
		<!-- Runs the RMI lookup service. -->
		<exec executable="rmiregistry" spawn="true">
		</exec>
	</target>
</project>