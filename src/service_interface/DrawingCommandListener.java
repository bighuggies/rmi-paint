package service_interface;

/**
 * Interface intended to be implemented by classes whose instance should be
 * notified of the progress of executing a DrawingCommand. A known
 * implementation of this interface is DrawingSpace, which tracks command
 * execution and causes the effects of executing commands to be rendered on
 * screen.
 * 
 * @author Ian Warren
 * 
 */
public interface DrawingCommandListener {
    /**
     * Enumerated type to define the three types of events that a DrawingCommand
     * can generate. DrawingStarted is an event that is fired by a
     * DrawingCommand when it begins execution. A DrawingCompleted event is
     * fired when a DrawingCommand completes execution. Between firing a
     * DrawingStarted and DrawingCompleted event, a DrawingCommand may fire an
     * arbitrary number of DrawingProgressed events. Each DrawingProgressed
     * event represents progress in the command's execution. E.g. the Pen
     * implementation of DrawingCommand generates a DrawingProgressed event for
     * every movement of the mouse while its button is pressed.
     */
    enum DrawingCommandEvent {
        DrawingStarted, DrawingCompleted, DrawingProgressed
    };

    /**
     * Called by a DrawingCommand to notify a listener of the DrawingCommand's
     * execution progress.
     * 
     * @param event
     *            the event generated by the DrawingCommand.
     * @param command
     *            the DrawingCommand that generated event and made the update
     *            call.
     */
    void update(DrawingCommandEvent event, DrawingCommand command);

}
